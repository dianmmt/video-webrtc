<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Group Video Call</title>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="stylesheet" href="/css/materialize.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.0.5/socket.io.js" integrity="sha512-2rUSTSAeOO02jF6eBqENNqPs1EohenJ5j+1dgDPdXSLz9nOlrr8DJk4zW/lDy8rjhGCSonW3Gx812XJQIKZKJQ==" crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="/css/lobby.css">
    <link rel="stylesheet" href="/css/main.css">
    <link rel="stylesheet" href="/css/room.css">
</head>
<body>
    <header id="nav">
        <div class="nav--list">
             <button id="members__button">
                <svg width="24" height="24" xmlns="http://www.w3.org/2000/svg" fill-rule="evenodd" clip-rule="evenodd"><path d="M24 18v1h-24v-1h24zm0-6v1h-24v-1h24zm0-6v1h-24v-1h24z" fill="#ede0e0"><path d="M24 19h-24v-1h24v1zm0-6h-24v-1h24v1zm0-6h-24v-1h24v1z"/></svg>
             </button>
             <a href="lobby.html"/>
                 <h3 id="logo">
                     <img src="./images/logo1.png" alt="Site Logo">
                     <span>Video WebRTC</span>
                 </h3>
             </a>
        </div>
 
         <div id="nav__links">
             <button id="chat__button"><svg width="24" height="24" xmlns="http://www.w3.org/2000/svg" fill-rule="evenodd" fill="#ede0e0" clip-rule="evenodd"><path d="M24 20h-3v4l-5.333-4h-7.667v-4h2v2h6.333l2.667 2v-2h3v-8.001h-2v-2h4v12.001zm-15.667-6l-5.333 4v-4h-3v-14.001l18 .001v14h-9.667zm-6.333-2h3v2l2.667-2h8.333v-10l-14-.001v10.001z"/></svg></button>
             <!-- <a class="nav__link" href="/">
                 Lobby
                 <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="#ede0e0" viewBox="0 0 24 24"><path d="M20 7.093v-5.093h-3v2.093l3 3zm4 5.907l-12-12-12 12h3v10h7v-5h4v5h7v-10h3zm-5 8h-3v-5h-8v5h-3v-10.26l7-6.912 7 6.99v10.182z"/></svg>
             </a> -->
             <a class="nav__link" id="create__room__btn" href="lobby.html">
                 Create Room
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="#ede0e0" viewBox="0 0 24 24"><path d="M12 0c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm6 13h-5v5h-2v-5h-5v-2h5v-5h2v5h5v2z"/></svg>
             </a>
         </div>
     </header>
    <div class="main-wrap">
        <div class="call-wrap card" style="z-index: 99" >
            <a id='meetingid' href="#" style="color: black;"></a>
            <div class="remote-video-wrap" id="remote-video" style="margin-bottom:0;background-color:rgb(131 131 131); display: flex;flex-wrap: wrap;">
                <div>
                    <div id="localUser" class="userbox remote-user div-center" style="flex-direction: column; height:100%;">
                        
                        <div class="div-center">
                            <video autoplay id="localStream"></video>
                        </div>
                        <h5 class="div-center"><%= username%></h5>
                    </div>
                </div>
                
            </div>
            <div class="stream__actions" id="btn-group" style="display: flex;">
                <button id="muteButton" class="waves-effect waves-light btn"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M12 2c1.103 0 2 .897 2 2v7c0 1.103-.897 2-2 2s-2-.897-2-2v-7c0-1.103.897-2 2-2zm0-2c-2.209 0-4 1.791-4 4v7c0 2.209 1.791 4 4 4s4-1.791 4-4v-7c0-2.209-1.791-4-4-4zm8 9v2c0 4.418-3.582 8-8 8s-8-3.582-8-8v-2h2v2c0 3.309 2.691 6 6 6s6-2.691 6-6v-2h2zm-7 13v-2h-2v2h-4v2h10v-2h-4z"/></svg></button>
                <button id="hideCameraButton" class="waves-effect waves-light btn"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M5 4h-3v-1h3v1zm10.93 0l.812 1.219c.743 1.115 1.987 1.781 3.328 1.781h1.93v13h-20v-13h3.93c1.341 0 2.585-.666 3.328-1.781l.812-1.219h5.86zm1.07-2h-8l-1.406 2.109c-.371.557-.995.891-1.664.891h-5.93v17h24v-17h-3.93c-.669 0-1.293-.334-1.664-.891l-1.406-2.109zm-11 8c0-.552-.447-1-1-1s-1 .448-1 1 .447 1 1 1 1-.448 1-1zm7 0c1.654 0 3 1.346 3 3s-1.346 3-3 3-3-1.346-3-3 1.346-3 3-3zm0-2c-2.761 0-5 2.239-5 5s2.239 5 5 5 5-2.239 5-5-2.239-5-5-5z"/></svg></button>
                <button id="screenShareButton" class="waves-effect waves-light btn"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M0 1v17h24v-17h-24zm22 15h-20v-13h20v13zm-6.599 4l2.599 3h-12l2.599-3h6.802z"/></svg></button>
                <button id="leaveRoomButton" style = "background-color:  #FF5050;" class="waves-effect waves-light btn"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M16 10v-5l8 7-8 7v-5h-8v-4h8zm-16-8v20h14v-2h-12v-16h12v-2h-14z"/></svg></button>
                <button id="recordButton" class="waves-effect waves-light btn">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                        <path d="M12 2c1.654 0 3 1.346 3 3v14c0 1.654-1.346 3-3 3s-3-1.346-3-3v-14c0-1.654 1.346-3 3-3zm5 3c0-2.757-2.243-5-5-5s-5 2.243-5 5v14c0 2.757 2.243 5 5 5s5-2.243 5-5v-14z"/>
                    </svg>
                </button>
            </div>
            <!-- New buttons for recording and downloading -->
            
        </div>
    </div>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="/js/materialize.min.js"></script>
    <script src="/js/client.js"></script>
    <script>
    var rtpAudioSenders = {};
var rtpVideoSenders = {};
var socketUrl = 'http://127.0.0.1:3000';
var username = "<%= username %>";
var meeting_id = "<%= meeting_id %>";
var localUserVideo;
var remoteStream = {};
var audioStream = {};
var audioTrack;
var mediaTrack;
var users_connectionID = {};
var users_connection = {};
var muteFlag = false;

let isRecording = false;
let mediaRecorder = null;
let recordedChunks = [];
var socket = io.connect(socketUrl);

var sdpFunction = (data, to_connid) => {
    socket.emit('sdpProcess', {
        message: data,
        to_connid: to_connid
    });
};

var muteButton = document.getElementById('muteButton');
muteButton.addEventListener('click', function() {
    muteFlag = !muteFlag;
    if (muteFlag) {
        if (audioTrack) audioTrack.enabled = false;
        muteButton.classList.add('active');
    } else {
        if (audioTrack) audioTrack.enabled = true;
        muteButton.classList.remove('active');
    }
});

var leaveRoomButton = document.getElementById('leaveRoomButton');
leaveRoomButton.addEventListener('click', function() {
    window.location.href = "/";
});

var hideCameraButton = document.getElementById('hideCameraButton');
hideCameraButton.addEventListener('click', function() {
    if (mediaTrack) {
        mediaTrack.enabled = !mediaTrack.enabled;
        if (mediaTrack.enabled) {
            hideCameraButton.classList.add('active');
        } else {
            hideCameraButton.classList.remove('active');
        }
    }
});

var screenShareButton = document.getElementById('screenShareButton');
var screenTrack = null; // Add this line to store the screen track

screenShareButton.addEventListener('click', async function() {
    if (screenTrack) {
        // Stop sharing the screen
        screenTrack.stop();
        screenTrack = null;
        screenShareButton.classList.add('active');
        updateMediaSenders(mediaTrack, rtpVideoSenders);
        localUserVideo.srcObject = new MediaStream([mediaTrack]);
    } else {
        try {
            const screenStream = await navigator.mediaDevices.getDisplayMedia({ video: true });
            screenTrack = screenStream.getVideoTracks()[0];
            screenShareButton.classList.remove('active');
            updateMediaSenders(screenTrack, rtpVideoSenders);
            localUserVideo.srcObject = new MediaStream([screenTrack]);
        } catch (err) {
            console.log('Error sharing screen:', err);
        }
    }
});
const recordButton = document.getElementById('recordButton');

recordButton.addEventListener('click', async () => {
    if (!isRecording) {
        // Start recording
        startRecording();
    } else {
        // Stop recording
        stopRecording();
    }
});
async function startRecording() {
    try {
        const stream = await navigator.mediaDevices.getDisplayMedia({ video: true });
        mediaRecorder = new MediaRecorder(stream);

        mediaRecorder.ondataavailable = (event) => {
            recordedChunks.push(event.data);
        };

        mediaRecorder.start();
        isRecording = true;
        recordButton.classList.add('active');
    } catch (err) {
        console.error('Error starting recording:', err);
    }
}

function stopRecording() {
    mediaRecorder.stop();
    isRecording = false;
    recordButton.classList.remove('active');
    downloadRecordedVideo();
}
function downloadRecordedVideo() {
    const blob = new Blob(recordedChunks, { type: 'video/webm' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'recorded_video.mp4';
    a.click();
    URL.revokeObjectURL(url);
    recordedChunks = [];
}
socket.on("connect", () => {
    if (socket.connected) {
        socket.emit("users_info_to_signaling_server", {
            current_user_name: username,
            meeting_id: meeting_id
        });
    }

    localConnectionID = socket.id;
    localUserVideo = document.getElementById("localStream");
    processMedia();
});

socket.on('newConnectionInformation', function(other_users) {
    $('#remote-video .other').remove();
    for (let i = 0; i < other_users.length; i++) {
        addUser(other_users[i].user_id, other_users[i].connectionId);
        createConnection(other_users[i].connectionId);
    }
});

socket.on('other_users_to_inform', function(data) {
    addUser(data.other_user_id, data.connId);
    createConnection(data.connId);
});

socket.on('sdpProcess', async function(data) {
    await sdpProcess(data.message, data.from_connid);
});

function addUser(other_username, connId) {
    $('#remote-video').append(`
        <div id="` + connId + `" class="remote-user other div-center-column">
            
            <div class="div-center">
                <video autoplay id="video_` + connId + `"></video>
                <audio autoplay id="audio_` + connId + `"></audio>
            </div>
            <h5 class="div-center">` + other_username + `</h5>
        </div>
    `);
}

function updateMediaSenders(track, rtpSenders) {
    for (var con_id in users_connection) {
        var connection = users_connection[con_id];
        if (connection && (connection.connectionState == "new" || connection.connectionState == "connecting" || connection.connectionState == "connected")) {
            if (rtpSenders[con_id] && rtpSenders[con_id].track) {
                rtpSenders[con_id].replaceTrack(track);
            } else {
                rtpSenders[con_id] = connection.addTrack(track);
            }
        }
    }
}

var iceConfig = {
    iceServers: [
    {
            urls: 'turn:192.158.29.39:3478?transport=udp',
            credential: 'JHMJkEqmGIFihWF2MN9p9aiSMEs=',
            username: '28224511:1379330808'
        },
        {
            urls: 'turn:192.158.29.39:3478?transport=tcp',
            credential: 'JHMJkEqmGIFihWF2MN9p9aiSMEs=',
            username: '28224511:1379330808'
        },
        { urls: 'stun:stun.l.google.com:19302' },
        { urls: 'stun:stun1.l.google.com:19302' },
        { urls: 'stun:stun2.l.google.com:19302' },
        { urls: 'stun:stun3.l.google.com:19302' },
        { urls: 'stun:stun4.l.google.com:19302' }
    ]
};

async function createConnection(connId) {
    var connection = new RTCPeerConnection(iceConfig);
    connection.onicecandidate = function(event) {
        if (event.candidate) {
            sdpFunction(JSON.stringify({
                'iceCandidate': event.candidate
            }), connId);
        }
    };
    connection.onnegotiationneeded = async function(event) {
        await createOffer(connId);
    };
    connection.ontrack = function(event) {
        if (!remoteStream[connId]) {
            remoteStream[connId] = new MediaStream();
        }
        if (!audioStream[connId]) {
            audioStream[connId] = new MediaStream();
        }
        if (event.track.kind == 'video') {
            remoteStream[connId].getTracks().forEach(t => remoteStream[connId].removeTrack(t));
            remoteStream[connId].addTrack(event.track);
            var remoteVideoDiv = document.getElementById('video_' + connId);
            if (remoteVideoDiv) {
                remoteVideoDiv.srcObject = remoteStream[connId];
                remoteVideoDiv.play();
            }
        } else if (event.track.kind == 'audio') {
            audioStream[connId].getTracks().forEach(t => audioStream[connId].removeTrack(t));
            audioStream[connId].addTrack(event.track);
            var remoteAudioDiv = document.getElementById('audio_' + connId);
            if (remoteAudioDiv) {
                remoteAudioDiv.srcObject = audioStream[connId];
                remoteAudioDiv.play();
            }
        }
    };

    users_connectionID[connId] = connId;
    users_connection[connId] = connection;
    
    if (mediaTrack) {
        updateMediaSenders(mediaTrack, rtpVideoSenders);
    }

    return connection;
}

async function createOffer(connid) {
    var connection = users_connection[connid];
    var offer = await connection.createOffer();
    await connection.setLocalDescription(offer);
    sdpFunction(JSON.stringify({ 'offer': connection.localDescription }), connid);
}

async function processMedia() {
    try {
        var vStream = await navigator.mediaDevices.getUserMedia({
            video: { width: 720, height: 480 },
            audio: false
        });
        var aStream = await navigator.mediaDevices.getUserMedia({ audio: true });

        audioTrack = aStream.getAudioTracks()[0];
        audioTrack.enabled = true;
        updateMediaSenders(audioTrack, rtpAudioSenders);

        mediaTrack = vStream.getVideoTracks()[0];
        localUserVideo.srcObject = new MediaStream([mediaTrack]);

        updateMediaSenders(mediaTrack, rtpVideoSenders);
    } catch (err) {
        console.log(err);
    }
}

async function sdpProcess(message, from_connid) {
    message = JSON.parse(message);
    if (message.answer) {
        await users_connection[from_connid].setRemoteDescription(new RTCSessionDescription(message.answer));
    } else if (message.offer) {
        if (!users_connection[from_connid]) {
            await createConnection(from_connid);
        }
        await users_connection[from_connid].setRemoteDescription(new RTCSessionDescription(message.offer));
        var answer = await users_connection[from_connid].createAnswer();
        await users_connection[from_connid].setLocalDescription(answer);
        sdpFunction(JSON.stringify({ 'answer': answer }), from_connid);
    } else if (message.iceCandidate) {
        if (!users_connection[from_connid]) {
            await createConnection(from_connid);
        }
        try {
            await users_connection[from_connid].addIceCandidate(message.iceCandidate);
        } catch (error) {
            console.log(error);
        }
    }
}

socket.on('closedConnectionInfo', function(connId) {
    $('#' + connId).remove();
    users_connectionID[connId] = null;
    if (users_connection[connId]) {
        users_connection[connId].close();
        users_connection[connId] = null;
    }
    if (remoteStream[connId]) {
        remoteStream[connId].getTracks().forEach(t => t.stop());
        remoteStream[connId] = null;
    }
});

    </script>
</body>
    
</html>
